name: gh-nodejs-app
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
      # comment5
      
env:
   DOCKER_REPOSITORY: andresguisado # name of Docker Hub ID
   IMAGE_NAME: gh-nodejs-app
   #CONTAINER_NAME: gh-nodejs-app #<name + first letter of your last name> e.g andresg-app
   IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER

jobs:
  CI-Code:
    runs-on: ubuntu-22.04
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Generate Trivy Vulnerability Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          cache: 'true'
          output: trivy-fs-report.json
          format: json
          ignore-unfixed: true
          exit-code: 0
        #env:
          #TRIVY_SKIP_DB_UPDATE: true
          #TRIVY_SKIP_JAVA_DB_UPDATE: true
          
      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy-fs-report.json
          retention-days: 30
          
      - name: SARIF
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          cache: 'true'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          skip-setup-trivy: true
          ignore-unfixed: true

      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif' 
          
      - name: Fail build on High/Criticial Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: table
          scan-ref: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0
          # On a subsequent call to the action we know trivy is already installed so can skip this
          skip-setup-trivy: true

          
  CI-Build:
    needs: CI-Code
    runs-on: ubuntu-22.04
      
    steps:   
   
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Build application
        run: echo Application has been succesfully built   
          
      - name: Build image container
        run: |
          sudo docker build -t $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
          
      - name: Run Trivy vulnerability image scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          output: trivy-image-report.json
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          #vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Image Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.json
          retention-days: 30
          
      - name: SARIF
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          skip-setup-trivy: true
          ignore-unfixed: true

      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'
          
      - name: Run Trivy vulnerability image scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          skip-setup-trivy: true
          #vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run AIKIDO image scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aikidosecurity/local-scanner image-scan $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG --apikey AIKIDO_CI_TOKEN
      #github/workflows/scan-output.html
      # --register --registry "CI/CD_andres_images"
      # -e BUILD_JOB_NAME=$CI_JOB_NAME -e BUILD_URL=$CI_JOB_URL -e BUILD_NUMBER=$CI_JOB_ID
      
      #- name: Log in to Docker Hub
        #uses: docker/login-action@v2
        #with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_PAT }}

      #- name: Build and push Docker image
        #uses: docker/build-push-action@v6
        #with:
          #context: .
          #file: ./Dockerfile
          #push: true
          #tags: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}
          
      - name: Docker Login & Push
        run: |
          echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG 
          docker tag $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG $DOCKER_REPOSITORY/$IMAGE_NAME:latest
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:latest 

      - name: Generating SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          format: 'github'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT
          severity: "MEDIUM,HIGH,CRITICAL"

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: '${{ github.workspace }}/dependency-results.sbom.json'
          retention-days: 30 # 90 is the default
          
  CD-Deploy:
    needs: CI-Build
    runs-on: ubuntu-22.04
  
    steps: 
    
      - name: Checkout code
        uses: actions/checkout@v4
    
         
    #  - name: Setting K8s context
    #    uses: azure/k8s-set-context@v3
    #    with:
    #      method: kubeconfig
    #      kubeconfig: ${{ secrets.KUBECONFIG }}
    #       context: emea-aguisado-test
           
    #  - name: Deploying
    #    run: |
    #      export IMAGE_CONTAINER="docker.io/$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG"
    #      export CONTAINER_NAME="$CONTAINER_NAME"
    #      export DEPARTMENT="$DEPARTMENT"
    #      sed -e "s#{{ IMAGE_CONTAINER }}#$IMAGE_CONTAINER#g" -e "s#{{ CONTAINER_NAME }}#$CONTAINER_NAME#g" -e "s#{{ DEPARTMENT }}#$DEPARTMENT#g" "./manifests/dev/deployment.yaml" | 
    #      kubectl apply -f -
    #      sed -e "s#{{ CONTAINER_NAME }}#$CONTAINER_NAME#g" -e "s#{{ DEPARTMENT }}#$DEPARTMENT#g" "./manifests/dev/service.yaml" | 
    #      kubectl apply -f -
            
