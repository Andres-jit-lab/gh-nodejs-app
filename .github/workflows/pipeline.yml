name: Aqua Security pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
      # comment5
      
env:
   DOCKER_REPOSITORY: andresguisado # name of Docker Hub ID
   IMAGE_NAME: gh-nodejs-app
   #CONTAINER_NAME: gh-nodejs-app #<name + first letter of your last name> e.g andresg-app
   IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER

jobs:
  CI-Code:
    runs-on: ubuntu-22.04
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Generate Trivy Vulnerability Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          cache: 'true'
          output: trivy-report.json
          format: json
          exit-code: 0
        env:
          #TRIVY_SKIP_DB_UPDATE: true
          #TRIVY_SKIP_JAVA_DB_UPDATE: true
          
      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30
          
      - name: Fail build on High/Criticial Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: table
          scan-ref: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1
          # On a subsequent call to the action we know trivy is already installed so can skip this
          skip-setup-trivy: true

  CI-Build:
    needs: CI-Code
    runs-on: ubuntu-22.04
      
    steps:   
   
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Build application
        run: echo Application has been succesfully built   
          
      - name: Build image container
        run: |
          sudo docker build -t $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          #vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
         
      #- name: Log in to Docker Hub
        #uses: docker/login-action@v2
        #with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_PAT }}

      #- name: Build and push Docker image
        #uses: docker/build-push-action@v6
        #with:
          #context: .
          #file: ./Dockerfile
          #push: true
          #tags: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}
          
      - name: Docker Login & Push
        run: |
          echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG 
          docker tag $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG $DOCKER_REPOSITORY/$IMAGE_NAME:latest
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:latest 
            
  CD-Deploy:
    needs: CI-Build
    runs-on: ubuntu-22.04
  
    steps: 
    
      - name: Checkout code
        uses: actions/checkout@v4
    
         
    #  - name: Setting K8s context
    #    uses: azure/k8s-set-context@v3
    #    with:
    #      method: kubeconfig
    #      kubeconfig: ${{ secrets.KUBECONFIG }}
    #       context: emea-aguisado-test
           
    #  - name: Deploying
    #    run: |
    #      export IMAGE_CONTAINER="docker.io/$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG"
    #      export CONTAINER_NAME="$CONTAINER_NAME"
    #      export DEPARTMENT="$DEPARTMENT"
    #      sed -e "s#{{ IMAGE_CONTAINER }}#$IMAGE_CONTAINER#g" -e "s#{{ CONTAINER_NAME }}#$CONTAINER_NAME#g" -e "s#{{ DEPARTMENT }}#$DEPARTMENT#g" "./manifests/dev/deployment.yaml" | 
    #      kubectl apply -f -
    #      sed -e "s#{{ CONTAINER_NAME }}#$CONTAINER_NAME#g" -e "s#{{ DEPARTMENT }}#$DEPARTMENT#g" "./manifests/dev/service.yaml" | 
    #      kubectl apply -f -
            
